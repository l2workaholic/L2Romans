//
// L2 Premium Auto Buffer + Death Notification + Hourly Level PM
//

var
  buffSchemeName: string = 'warrior';
  buffSchemeName2: string = 'song';
  deathNotified: Boolean = False;
  lastLevelReportTime: Cardinal = 0;
  levelStr: string;

function getBuffTime(ID: integer; Obj: TL2Live = nil): cardinal; overload;
var 
  i: integer;
begin
  result := 0;
  if (Obj = nil) then Obj := User;
  for i := 0 to Obj.Buffs.Count-1 do begin
    if (Obj.Buffs.Items(i).id = ID) then begin
      result := Obj.Buffs.Items(i).EndTime;
      break;
    end;
  end;
end;

begin
  lastLevelReportTime := GetTickCount;

  while True do begin
    // Death notification system
    if User.Dead then begin
      if not deathNotified then begin
        Engine.EnterText('"Barba estou morto, ajuda!');
        Delay(100);
        Engine.UseKey('Enter');
        WriteLn('[AVISO] Mensagem enviada para Barba (Personagem morto)');
        deathNotified := True;
      end;

      while User.Dead do
        Delay(1000);
    end
    else begin
      deathNotified := False;

      // Auto-buff system (only when alive)
      if (getBuffTime(1062) < 9000) then begin
        Print('Buffing the scheme ' + buffSchemeName);
        Engine.BypassToServer('buffer givebuffs ' + buffSchemeName + ' pet');
        Delay(300);
        Engine.BypassToServer('buffer givebuffs ' + buffSchemeName);
      end;

      if (getBuffTime(268) < 9000) then begin
        Print('Buffing the scheme ' + buffSchemeName2);
        Engine.BypassToServer('buffer givebuffs ' + buffSchemeName2 + ' pet');
        Delay(300);
        Engine.BypassToServer('buffer givebuffs ' + buffSchemeName2);
      end;

      // Hourly level report to Barba
      if (GetTickCount - lastLevelReportTime >= 3600000) then begin
        Str(User.Level, levelStr); // Convert integer to string
        Engine.EnterText('"Barba meu level atual Ã©: ' + levelStr);
        Delay(100);
        Engine.UseKey('Enter');
        WriteLn('[INFO] Level report sent to Barba');
        lastLevelReportTime := GetTickCount;
      end;
    end;

    Delay(1000);
  end;
end.
